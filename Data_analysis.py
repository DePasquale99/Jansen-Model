import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
import seaborn as sns

data = np.load('Data/results.npy')

print(np.shape(data))

N, variables, timepoints = np.shape(data)
print(timepoints)


def time_series(data):
    P1 = np.zeros((N, timepoints))
    P2 = np.zeros((N, timepoints))
    for i in range(N):
        for j in range(timepoints):
            P1[i,j] = data[i,0,j]
            P2[i,j] = data[i, 3, j]
    
    plt.figure()
    plt.title('post synaptic potential generated by example populations')
    

    plt.subplot(211)
    plt.imshow(P1, label = 'P1 population')   

    plt.xlabel('time points')
    plt.ylabel('region index')
    plt.title('time series of P1 population')

    plt.subplot(212)
    plt.imshow(P2, label = 'P2 population')
    plt.xlabel('time (ms)')
    plt.ylabel('region index')
    plt.title('time series of P2 population')
    plt.show()

    return


def plot(data):
    t = np.linspace(0, 2, timepoints)
    plt.figure()
    plt.title('post synaptic potential generated by example populations')
    plt.subplot(211)
    plt.title('P1 examples')
    for i in range(0, N, 30):
        label = 'population ' + str(i)
        plt.plot(t[:], data[i,0,:], label=label)

    plt.subplot(212)
    plt.title('P2 examples')
    for i in range(0, N, 30):
        label = 'population ' + str(i)
        plt.plot(t[:], data[i,3,:], label=label)
    plt.legend()
    plt.show()

    return 

def correlation(data):

    N, datapoints = np.shape(data)

    pearson_R = np.zeros((N,N))

    for i in range(N):
        for j in range(i):
            R = pearsonr(data[i], data[j]).statistic
            pearson_R[i, j] = R
            pearson_R[j, i] = R


    sns.heatmap(pearson_R)
    plt.show()






    return



plot(data)
time_series(data)